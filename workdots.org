#+TITLE: Literate Dotfile Configuration For Work
#+AUTHOR: Eduardo Robles
#+DATE: 20230411
#+EMAIL: eduardorobles@proton.me
#+OPTIONS: num:nil html-style:nil


* Literate Dotfile Configuration
* Purpose:
This document serves as a means to create a centralized location for all system dependent configurations.
* Emacs
** Windows 10
#+BEGIN_COMMENT'
Downloads:
#+END_COMMENT
** Init
#+BEGIN_SRC emacs-lisp
      ;;; -*- lexical-binding: t -*-
    (require 'package)
    (setq byte-compile-warnings '(cl-functions))
    ;; Set package archives
    ;;(setq package-check-signature nil)  ; because GNU ELPA keeps choking on the sigs
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (with-eval-after-load 'package (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/")))
    (setq package-enable-at-startup nil)

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;;Use-package
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (setq use-package-verbose t)
    (setq use-package-always-ensure t)
    (eval-when-compile (require 'use-package))
    (use-package auto-compile
      :config (auto-compile-on-load-mode))
     (setq load-prefer-newer t)

  ;;From lambda.cx blog
  ;;https://blog.lambda.cx/posts/eamacs-improved-frame-title/
  (setq frame-title-format '("%b@" (:eval (or (file-remote-p default-directory 'host) system-name)) " â€” Emacs"))
   ;; the t parameter apends to the hook, instead of prepending
   ;; this means it'd be run after other hooks that might fiddle
   ;; with the frame size
   (add-hook 'window-setup-hook 'toggle-frame-maximized t)
   (setq default-frame-alist '((width . 110)))

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (show-paren-mode t)

    (set-charset-priority 'unicode)
    (setq locale-coding-system   'utf-8)
    (set-terminal-coding-system  'utf-8)
    (set-keyboard-coding-system  'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system        'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

    (global-auto-revert-mode t)

    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    (global-visual-line-mode t)
    (global-prettify-symbols-mode t)

    (require 'org)
    (org-babel-load-file (expand-file-name "~/.emacs.d/workconfig.org"))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
** Emacs Customization
*** Startup Config
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs                  'y-or-n-p
      confirm-nonexistent-file-or-buffer  t
      require-final-newline               t
      visible-bell                        nil
      ring-bell-function                  'ignore
      minibuffer-prompt-properties
      '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)

      ;; Disable non selected window highlight
      cursor-in-non-selected-windows     nil
      highlight-nonselected-windows      nil
      ;; PATH
;;      exec-path                          (append exec-path '("/usr/local/bin/"))
      indent-tabs-mode                   nil
      inhibit-startup-message            t
      fringes-outside-margins            t
      x-select-enable-clipboard          t
      create-lockfiles                   nil
      tramp-default-method               "plink"

)
#+END_SRC
*** Backup Settings
    Disable backups. Creates ugly junk on filesystem.
#+BEGIN_SRC emacs-lisp
(setq backup-inhibited t
      make-backup-files nil
      auto-save-default nil)
#+END_SRC
*** User Details
 #+BEGIN_SRC emacs-lisp
(setq user-full-name "Eduardo Robles"
      user-mail-address "")
 #+END_SRC
*** Auth sources
#+BEGIN_SRC emacs-lisp
(require 'auth-source)
(setq
epa-file-encrypt-to user-mail-address
auth-sources (list (expand-file-name "~/.netrc")))
#+END_SRC
** GUI Settings
*** Fonts
#+BEGIN_SRC emacs-lisp
   ;;(defun font-exists-p (font) (if (null (x-list-fonts font)) nil t))
   ;;(when (window-system)
   ;;  (cond ((font-exists-p "IBM Plex Mono") (set-frame-font "IBM Plex Mono:spacing=100:size=18" nil t))
   ;;    ((font-exists-p "IBM Plex Mono Text") (set-frame-font "IBM Plex Mono Text:spacing=100:size=18" nil t))))


  ;;(setq w32-standard-fontset-spec "-outline-IBM Plex Mono-normal-normal-normal-mono-16-*-*-*-c-*-iso8859-1")
    ;;(set-face-font 'default "IBM Plex Mono-12:weight=normal:slant=normal:width=normal:registry=iso10646-1") ; does not work with ASCII correctly.
  ;;(set-face-font 'default "Cascadia Code-12:weight=regular:slant=normal:width=normal:registry=iso10646-1")
  ;;(set-face-font 'variable-pitch "IBM Plex Mono-12:weight=normal:slant=normal:width=normal")
#+END_SRC

*** All The Icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

(use-package all-the-icons-dired
:config
:hook (dired-mode . (lambda ()
		     (interactive)
		     (unless (file-remote-p default-directory)
		       (all-the-icons-dired-mode)))))
#+END_SRC

*** Modus Vivendi Tinted Theme
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure t)

  (load-theme 'modus-vivendi-tinted :no-confirm)
#+END_SRC

** Packages Setup
*** Vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode))

(use-package vertico-directory
  :after vertico
  :ensure nil
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+END_SRC
*** Corfu
#+BEGIN_SRC emacs-lisp
(use-package corfu
  ;; Optional customizations
   :custom
   (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
   (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
   (corfu-quit-no-match 'seperator)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-excluded-modes'.
  :init
  (global-corfu-mode))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :hook ((prog-mode . flycheck-mode)
         (markdown-mode . flycheck-mode)
         (org-mode . flycheck-mode))
  :config
  (setq flycheck-check-syntax-automatically '(save mode-enabled newline))
  (setq flycheck-display-errors-delay 0.1)
    (setq flycheck-checker-error-threshold 1000)
  (setq flycheck-indication-mode nil)
  (define-key flycheck-mode-map (kbd "<f8>") #'flycheck-next-error)
  (define-key flycheck-mode-map (kbd "S-<f8>") #'flycheck-previous-error))
#+END_SRC
*** Flyspell
#+BEGIN_COMMENT
(use-package flyspell
  :ensure nil
  :hook ((markdown-mode . flyspell-mode)
         (org-mode      . flyspell-mode))
  :config
  (setq ispell-program-name "/usr/bin/aspell"))
#+END_COMMENT

*** Org
**** Org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
     :bind
          ("C-c l" . org-store-link)
          ("C-c a" . org-agenda)
          ("C-c c" . org-capture))
  (require 'ox-html)
  (require 'ox-latex)
  (require 'ox-md)
#+END_SRC
**** Org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (setq org-hide-leading-stars t)
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t))))
#+END_SRC
**** Org-publish
#+BEGIN_SRC emacs-lisp
  (defun my-publish (a b c)
    "Here is how I like to publish."
    (setq org-export-with-toc t)
    (org-html-publish-to-html a b c)
    (setq org-export-with-toc nil)
    (org-ascii-publish-to-ascii a b c))

  (defvar readtheorg-head
           "<link rel='stylesheet' type='text/css' href='src/readtheorg_theme/css/htmlize.css'/>
          <link rel='stylesheet' type='text/css' href='src/readtheorg_theme/css/readtheorg.css'/>
          <script type='text/javascript' src='src/lib/js/jquery.min.js'></script>
          <script type='text/javascript' src='src/lib/js/bootstrap.min.js'></script>
          <script type='text/javascript' src='src/lib/js/jquery.stickytableheaders.min.js'></script>
          <script type='text/javascript' src='src/readtheorg_theme/js/readtheorg.js'></script>")


  ;;(defvar org-print
  ;;     "<link rel='stylesheet' type='text/css' href='orgPrint.css'/>")

  (setq org-publish-project-alist
        `(("wj"
           :base-directory "~/Org/journal/"
           :base-extension "org"
           :publishing-directory "~/Org/journal/work/"
           :html-head ,readtheorg-head
	   :section-numbers nil
           :publishing-function my-publish)

           ("wj-print"
           :base-directory "~/Org/journal/"
           :base-extension "org"
           :publishing-directory "~/Org/journal/work/print/"
           :with-toc nil
           :html-html5-fancy t
           :html-doctype "html5"

           :html-head-include-scripts nil
           :html-head-include-default-style nil
           :html-head "<link rel='stylesheet' type='text/css' href='style.css'/>"
           :publishing-function org-html-publish-to-html)))
	   #+END_SRC
**** Org-babel
#+BEGIN_SRC emacs-lisp
(define-advice org-babel-execute-src-block (:before (&rest _) d/load-lang)
 "Load src language on demand.

This removes the need to add every language manually to
`org-babel-load-languages'. This also implies that any language
that supports execution can be executed. Executing src blocks is
an active enough action that I'm ok with this."
 (let ((language (intern
		  (org-element-property :language (org-element-at-point)))))
   (message "LANG: %s" language)
   (pcase language
     ('sh (setq language 'shell))
     ('C++ (setq language 'C)))
   (message "LANG: %s" language)
   (unless (alist-get language org-babel-load-languages)
     (add-to-list 'org-babel-load-languages (cons language t))
     (org-babel-do-load-languages
      'org-babel-load-languages
      org-babel-load-languages))))
#+END_SRC

**** Org-agenda
#+BEGIN_SRC emacs-lisp
    (setq org-directory "~/Org"
          org-agenda-files '("~/Org")
           org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Org/log.org" "Tasks")(file "~/.emacs.d/templates/todo.orgcaptmpl"))
            ("n" "Note" entry (file+headline "~/Org/log.org" "Notes")(file "~/.emacs.d/templates/notes.orgcaptmpl"))
            ("c" "Contact" entry (file+headline "~/Org/contacts.org" "Work Contacts")(file "~/.emacs.d/templates/contacts.org"))
            ("i" "Incident" plain (function org-journal-find-location)(file "~/.emacs.d/templates/incident.org"):jump-to-captured t :immediate-finish t :clock-in t :clock-keep t)
            ("r" "Request" plain (function org-journal-find-location)(file "~/.emacs.d/templates/request.org"):jump-to-captured t :immediate-finish t :clock-in t :clock-keep t)
            ("m" "README" entry (file+headline "~/Org/READMES/all_readme_files.org" "READMES")(file "~/.emacs.d/templates/README.org")))
          org-log-done (quote time)
          org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(i)" "WAIT(w)" "NEXT(n)" "|" "DONE(d)" "CANCELLED(c)" "INCOMPLETE(x)"))
          org-refile-targets '(("~/Org/archive.org" :maxlevel . 3)))
    ;;(setq org-agenda-span 'month)
    ;;(setq org-agenda-start-with-log-mode t)
    ;;(setq org-log-done 'time)
    ;;(setq org-log-into-drawer t)
#+END_SRC
**** Org-mode settings
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil
  org-startup-indented t
  org-insert-heading-respect-content t
  org-src-window-setup 'current-window
  org-export-in-background nil
  org-export-with-author nil
  org-export-babel-evaluate nil
  org-html-validation-link nil
  org-confirm-babel-evaluate nil
  org-src-tab-acts-natively t
  org-log-into-drawer t
  org-confirm-elisp-link-function 'y-or-n-p)
#+END_SRC
**** Org Journal
#+BEGIN_SRC emacs-lisp
    (use-package org-journal
    :ensure t
    :custom
    (org-journal-dir "~/Org/journal/")
    (org-journal-file-type 'weekly)
    (org-journal-file-format "%Y%m%d.org")
    (org-journal-time-prefix "*** ")
    )

  ;; When =org-journal-file-pattern= has the default value, this would be the regex.
(setq org-agenda-file-regexp "\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\'")
(add-to-list 'org-agenda-files org-journal-dir)
    ;;(setq org-journal-enable-agenda-integration t)

    (defun org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      (unless (eq org-journal-file-type 'daily)
	(org-narrow-to-subtree))
      (goto-char (point-max)))

  ;;  (setq org-capture-templates '(("i" "incident" plain (function org-journal-find-location)(file "~/.emacs.d/templates/incident.org"):jump-to-captured t :immediate-finish t)
  ;;        ("r" "request" plain (function org-journal-find-location)(file "~/.emacs.d/templates/request.org"):jump-to-captured t :immediate-finish t)))
#+END_SRC

*** Demo-it
#+BEGIN_SRC emacs-lisp
(use-package demo-it)
#+END_SRC

*** Org Tree Slide
#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide)
#+END_SRC

*** Elfeed
#+BEGIN_SRC emacs-lisp
  ;; Load elfeed
  (use-package elfeed
    :ensure t
    :config
(setq elfeed-use-curl t)
(elfeed-set-timeout 36000))

  ;; Load elfeed-org
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
    )

  ;; Load elfeed-goodies
  (use-package elfeed-goodies
    :ensure t
    )

  (require 'elfeed)
  (require 'elfeed-goodies)

  (elfeed-goodies/setup)
#+END_SRC

*** Page Break Lines
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines)
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens)
#+END_SRC
*** Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))
#+END_SRC

*** HTMLIZE
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

*** Emoji
#+BEGIN_SRC emacs-lisp
(use-package emojify)
#+END_SRC

*** JSON mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json\\'")
#+END_SRC

*** Markdown mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

*** YAML mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'")
#+END_SRC

*** Touch typing
#+BEGIN_SRC emacs-lisp
(use-package speed-type)
#+END_SRC

** Templates

*** Snippets
*** Capture
**** README
#+BEGIN_SRC org-mode
  * %^{PROJECT TITLE}
  :PROPERTIES:
  :EXPORT_FILE_NAME:
  :END:
  ** Vendor Information
  ** Description

  An in-depth paragraph about your project and overview of use.

  ** Getting Started

  *** Dependencies

  - Describe any prerequisites, libraries, OS version, etc., needed before
    installing program.
  - ex. Windows 10

  *** Installing

  - How/where to download your program
  - Any modifications needed to be made to files/folders

  *** Executing program

  - How to run the program
  - Step-by-step bullets

  #+begin_example
  code blocks for commands
  #+end_example

  ** Help

  Any advise for common problems or issues.

  #+begin_example
  command to run if program contains helper info
  #+end_example

  ** Authors

  Contributors names and contact info

  ex. Dominique Pizzie
  ex. [[https://twitter.com/dompizzie][@DomPizzie]]

  ** Version History

  - 0.2
    - Various bug fixes and optimizations
    - See [[][commit change]] or See [[][release history]]
  - 0.1
    - Initial Release

  ** License

  This project is licensed under the [NAME HERE] License - see the
  LICENSE.md file for details

  ** Acknowledgments

  Inspiration, code snippets, etc.
  [[https://github.com/matiassingers/awesome-readme][awesome-readme]]
  [[https://gist.github.com/PurpleBooth/109311bb0361f32d87a2][PurpleBooth]]

#+END_SRC
**** TO DO
#+BEGIN_SRC org-mode
 * TODO %^{todo} %^G
 Scheduled: %T
#+END_SRC
**** Notes
#+BEGIN_SRC org-mode
 * %^{Name} Captured %u
 %^{Note Type|note|quote|one-liner|code|link}
 ---
 %?
#+END_SRC
**** Contacts
#+BEGIN_SRC org-mode
 ** %^{Name}

 :PROPERTIES:
 :EMAIL: %^{Email}
 :PHONE: %^{Phone}
 :ALIAS: %^{Alias}
 :NICKNAME:
 :NOTE:
 :ADDRESS: %^{Address}
 :BIRTHDAY:
 :END:
#+END_SRC
**** Bullet (Next)
#+BEGIN_SRC org-mode
 * NEXT %^{task} %^G
 Scheduled: %T
 Captured: %u
#+END_SRC
* RSS Feeds
RSS Feeds to add into Elfeed in Emacs
:PROPERTIES:
:EXPORT_FILE_NAME: elfeed.org
:END:
*** Blogs                                                          :elfeed:
*** https://eduardorobles.com/index.xml                              :blog:
*** https://opensource.com/feed                                     :Linux:
*** https://solar.lowtechmagazine.com/feeds/all-en.atom.xml     :GreenTech:
*** [[https://xvrdm.github.io/index.xml][Invalid Input - Datascience Journal]]                             :emacs:
*** [[https://thagomizer.com/atom.xml][thagomizer.com]]                                             :OpenSource:
*** [[https://thenextweb.com/feed][The Next Web]]                                                :GreenTech:
*** [[https://devblogs.microsoft.com/landingpage/][Microsoft Developers Blogs]]
*** [[https://github.com/alexnathanson/solar-protocol/releases.atom][Solar Protocol - Github Releases]]
*** [[https://blog.cloudflare.com/rss/][Cloudflare Blog]]
